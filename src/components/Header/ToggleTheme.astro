---
import { Icon } from 'astro-icon/components';
---

<toggle-theme>
  <button>
    <Icon name="mdi:white-balance-sunny" class="sun" />
    <Icon name="mdi:moon-and-stars" class="moon" />
    <div class="circle" style="--order: 0"></div>
    <div class="circle" style="--order: 1"></div>
    <div class="circle" style="--order: 2"></div>
    <div class="circle" style="--order: 3"></div>
  </button>
</toggle-theme>

<style>
  button {
    position: relative;
    display: flex;
    font-size: 1.125rem;
    padding: 0.625rem;
    border-radius: 50%;
    cursor: pointer;
    color: var(--c-text);
    background-color: var(--c-primary);
  }

  @media (prefers-reduced-motion: no-preference) {
    button {
      transition:
        background-color 0.3s ease-in-out,
        transform 0.3s ease-in-out;
    }
  }

  button:hover,
  button:focus {
    background-color: var(--c-accent);
    transform: scale(1.05);
  }

  toggle-theme .sun {
    display: none;
  }

  toggle-theme .moon {
    display: inline-block;
  }

  :global(html.dark-theme) toggle-theme .sun {
    display: inline-block;
  }

  :global(html.dark-theme) toggle-theme .moon {
    display: none;
  }

  .circle {
    position: absolute;
    top: 50%;
    right: 50%;
    transform: translate(50%, -50%) scale(0);
    width: calc(1.42 * 200vmax);
    aspect-ratio: 1;
    border-radius: 50%;
  }

  .circle.light {
    background-color: var(--light-background-gradient-from);
  }

  .circle.dark {
    background-color: var(--dark-background-gradient-from);
  }

  @media (prefers-reduced-motion: no-preference) {
    .circle.animate {
      animation: expansion 1.2s;
      animation-delay: calc(var(--order) * 0.1s);
    }

    @keyframes expansion {
      0%,
      100% {
        transform: translate(50%, -50%) scale(0);
      }
      70% {
        transform: translate(50%, -50%) scale(1);
      }
    }
  }
</style>

<script>
  class ToogleTheme extends HTMLElement {
    constructor() {
      super();
      const darkThemeClass = 'dark-theme';
      const button = this.querySelector('button');
      const circles = this.querySelectorAll('.circle');
      const toggleTheme = () => document.documentElement.classList.toggle(darkThemeClass);

      button?.addEventListener('click', () => {
        button.blur();

        const animationDisabled = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        if (animationDisabled) {
          toggleTheme();
          return;
        }

        button.disabled = true;
        const isDarkMode = document.documentElement.classList.contains(darkThemeClass);

        circles.forEach((circle, index) => {
          if (index % 2 === 0) {
            circle.classList.add(isDarkMode ? 'light' : 'dark');
          } else {
            circle.classList.add(isDarkMode ? 'dark' : 'light');
          }
          circle.classList.add('animate');
        });

        setTimeout(() => {
          toggleTheme();
        }, 750);

        setTimeout(() => {
          circles.forEach((circle) => {
            circle.classList.remove('light', 'dark', 'animate');
          });
          button.disabled = false;
        }, 1500);
      });
    }
  }

  customElements.define('toggle-theme', ToogleTheme);
</script>
